/*
 * API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.11.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.GeoPoint;
import io.swagger.client.model.MapAddress;
import io.swagger.client.model.Type;
import java.io.IOException;
import java.util.UUID;

/**
 * Ładowarka
 */
@ApiModel(description = "Ładowarka")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-02-19T22:49:09.515+01:00")
public class Charger {
  @SerializedName("address")
  private MapAddress address = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("parkingId")
  private UUID parkingId = null;

  @SerializedName("type")
  private Type type = null;

  @SerializedName("location")
  private GeoPoint location = null;

  @SerializedName("name")
  private String name = null;

  public Charger address(MapAddress address) {
    this.address = address;
    return this;
  }

   /**
   * Adres
   * @return address
  **/
  @ApiModelProperty(value = "Adres")
  public MapAddress getAddress() {
    return address;
  }

  public void setAddress(MapAddress address) {
    this.address = address;
  }

  public Charger id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Identyfikator
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Identyfikator")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public Charger parkingId(UUID parkingId) {
    this.parkingId = parkingId;
    return this;
  }

   /**
   * Id parkingu na którym jest ładowarka
   * @return parkingId
  **/
  @ApiModelProperty(value = "Id parkingu na którym jest ładowarka")
  public UUID getParkingId() {
    return parkingId;
  }

  public void setParkingId(UUID parkingId) {
    this.parkingId = parkingId;
  }

  public Charger type(Type type) {
    this.type = type;
    return this;
  }

   /**
   * Typ
   * @return type
  **/
  @ApiModelProperty(value = "Typ")
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }

  public Charger location(GeoPoint location) {
    this.location = location;
    return this;
  }

   /**
   * Współrzędne
   * @return location
  **/
  @ApiModelProperty(value = "Współrzędne")
  public GeoPoint getLocation() {
    return location;
  }

  public void setLocation(GeoPoint location) {
    this.location = location;
  }

  public Charger name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Nazwa
   * @return name
  **/
  @ApiModelProperty(value = "Nazwa")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Charger charger = (Charger) o;
    return Objects.equals(this.address, charger.address) &&
        Objects.equals(this.id, charger.id) &&
        Objects.equals(this.parkingId, charger.parkingId) &&
        Objects.equals(this.type, charger.type) &&
        Objects.equals(this.location, charger.location) &&
        Objects.equals(this.name, charger.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, id, parkingId, type, location, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Charger {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parkingId: ").append(toIndentedString(parkingId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

